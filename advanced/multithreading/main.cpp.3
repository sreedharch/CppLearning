#include <cstdlib>
#include <iostream>
#include <pthread.h>
#include <unistd.h>

using namespace std;

#define NUM_THREADS 5

void *wait(void *t) {
  int i;
  long tid;

  tid = (long)t;
  sleep(1);
  cout << "Sleeing in thread " << endl;
  cout << "Thread with id: " << tid << " ....exiting" << endl;
  pthread_exit(NULL);
}

int main() {
  int rc, i;
  pthread_t thread[NUM_THREADS];
  pthread_attr_t attr;
  void *status;

  // initialize and set thread joinable
  pthread_attr_init(&attr);
  pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_JOINABLE);

  for (i = 0; i < NUM_THREADS; i++) {
    cout << "main(): creating thread, " << i << endl;
    rc = pthread_create(&thread[i], &attr, wait, (void *)i);

    if (rc) {
      cout << "Error: unable to create thread," << rc << endl;
      exit(-1);
    }
  }

  // free attribute and wait for the other threads
  pthread_attr_destroy(&attr);
  for (i = 0; i < NUM_THREADS; i++) {
    rc = pthread_join(thread[i], &status);

    if (rc) {
      cout << "Error: unable to join," << rc << endl;
      exit(-1);
    }
    cout << "Main: completed thread id: " << i;
    cout << " exiting with status :" << status << endl;
  }

  cout << "Main: program exiting." << endl;
  pthread_exit(NULL);
}